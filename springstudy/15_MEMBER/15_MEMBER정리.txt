1. signIn.jsp

1) 		// fnEmailCheck();   -> fnEmailAuth()에서 호출해서 페이지 로드 이벤트에 안적어도 된다.

2) 이메일 중복체크
	//    1) 이메일 중복을 체크하는 ajax를 동작시킨다.
	//    2) ajax의 처리 결과에 따라서 이후 동작이 달라진다.
	//       (1) 중복이 없는 경우 : fnAuthCodeSuccess => 이메일 인증 진행(이메일을 보내는 Service를 동작시킬 ajax가 필요하다.)
	//       (2) 중복이 있는 경우 : fnAuthCodeFail    => 오류 처리
	//    ※ ajax 처리결과를 이용해서 또 다른 ajax 처리가 필요한 상황
	//      Promise 처리를 해야한다.
	//      동기 통신 -> 차례를 기다리며 순차적으로 진행
	//      비동기 통신(Ajax) -> 동시다발적으로 진행
	//      ajax 안에 ajax를 넣으면 차례를 기다리지 않고 동시에 처리하려 하기 때문에 오류가 난다.
	//      -> Promise : 비동기통신의 순서를 잡아준다.
	
	/*
	new Promise(function(resolve, reject){
		resolve();
		reject(1000);
	}).then(
		function(){ }		
	).catch(
		function(code){ }		
	)
	*/
	
	/*
	function fnEmailCheck(){
		return new Promise(function(resolve, reject{
			이메일 형식이 틀리면 reject(1000);
			$.ajax({
				이메일 중복이 없으면 resolve();
				이메일 중복이 있으면 reject(2000);
			})
		});
	}
	function fnEmailAuth(){
		fnEmailCheck().then(
			function(){ 
				$.ajax({
					인증코드 전송하는 ajax 처리
				})
			}		
		).catch(
			function(code){ 
				code에 따른 alert 처리
			}		
		)
	}
	*/
	
3) let regEmail = /^[a-zA-Z0-9-_]+@[a-zA-Z0-9]+(\.[a-zA-Z]{2,}){1,2}$/;         // + : 앞에 있는 문자가 한 글자 이상 들어갑니다.
																				// (\.[a-zA-Z]{2,}){1,2} -> (.com) or (.co)(.kr)

4) 


2. 인터셉터 
   1) servlet-context  -> 한 인터셉터에 mapping path를 여러개 줄 수 있다.
   2) interceptor.java -> 정해진 매핑의 컨트롤러가 동작하기 직전과 직후에 동작하게 한다. 
                       -> 

3. Map<String, Object> map = new hashMap<>();
   map.put("people", "사람");
   map.put("baseball", "야구");
   
   map.get("people"); -> 사람

   -> put 은 key, value 를 지정해주는 것, get은 해당 key에 해당하는 value 값을 불러올 때 사용!


4. 쿠키 확인
   chrome -> 설정 -> 개인정보 및 보안 -> 쿠키 및 기타 사이트 데이터 -> 모든 쿠키 및 사이트 데이터 보기 -> localhost




스프링 동작 자세히 살펴보기

1. 사용자가 요청한다.
   <a href="${contextPath}/list">

2. DispatcherServlet이 요청을 받는다.

3. DispatcherServlet은 요청을 어떤 컨트롤러가 
   처리하는지 판단하는 HandlerMapping을 부른다.

4. HandlerMapping에 의해서 요청을 처리하는 Controller가 호출된다.

5. Controller가 요청을 처리하고 응답을 담당하는 ModelAndView를 부른다.
   Model : JSP에서는 request로 값을 전달하고, 스프링에서는 Model로 값을 전달한다.

6. ModelAndView가 전달할 값과 전달할 뷰(JSP : return "list")를 DispatcherServlet에게 전달한다.

7. DispatcherServlet은 응답할 정보를 ViewResolver에게 전달한다.

8. ViewResolver는 응답할 뷰(JSP : return "/WEB-INF/views/list.jsp") 
   정보를 만들어서 다시 DispatcherServlet에게 전달한다.

9. DispatcherServlet이 응답할 뷰로 이동한다.

* annotation 공부해야함.
1) @Configuration : bean을 만드는 java class 파일. spring bean configuration file과 같은 일을 함.

2) @Bean : bean을 만든다.

3) @ImportResource("java/customer_context.xml") : java/customer_context.xml에 만들어져 있는 bean을 가져오세요.

4) @Controller : 서블릿으로 만들지 않고 클래스로 컨트롤러 역할을 수행한다.

5) @RequestMapping(value = "/", method = RequestMethod.GET)
   - URLMapping을 처리하는 애너테이션이다.
   - 메소드마다 하나씩 가져가야 한다.
   - 속성
	1) value : URLMapping 작성
	2) method : 요청 메소드 작성(GET, POST)

--------03_MVC_DI

6) @Autowired
   - bean의 타입(class)이 일치하는 bean을 찾아서 주입하는 방식(주의. bean의 이름(id)를 찾는 방식이 아님)
   - 필드, 생성자, setter에서 사용하는데 상황에 따라 생략

* DI

  1. Dependency Injection
  2. 의존성 주입
  3. 스프링 컨테이너에 있는 bean을 스프링이 주입하는 방법
  4. 방법
     1) 필드에 직접 주입       -> 필드가 많은 경우 사용하지 않는 것이 좋다.
     2) 생성자를 이용해서 주입 -> @Autowired 안 적어도 된다.
     3) setter를 이용해서 주입

7) @Qualifier(value="board1")    // <qualifier value="board1"/> 이 bean을 주입해 주세요.
   - @Autowired는 class로 bean을 인식하기 때문에 
     id="board1"과 id="board2"를 다를 bean으로 인식하지 못한다.






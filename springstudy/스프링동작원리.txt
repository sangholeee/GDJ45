스프링 동작 자세히 살펴보기

1. 사용자가 요청한다.
   <a href="${contextPath}/list">

2. DispatcherServlet이 요청을 받는다.

3. DispatcherServlet은 요청을 어떤 컨트롤러가 
   처리하는지 판단하는 HandlerMapping을 부른다.

4. HandlerMapping에 의해서 요청을 처리하는 Controller가 호출된다.

5. Controller가 요청을 처리하고 응답을 담당하는 ModelAndView를 부른다.
   Model : JSP에서는 request로 값을 전달하고, 스프링에서는 Model로 값을 전달한다.

6. ModelAndView가 전달할 값과 전달할 뷰(JSP : return "list")를 DispatcherServlet에게 전달한다.

7. DispatcherServlet은 응답할 정보를 ViewResolver에게 전달한다.

8. ViewResolver는 응답할 뷰(JSP : return "/WEB-INF/views/list.jsp") 
   정보를 만들어서 다시 DispatcherServlet에게 전달한다.

9. DispatcherServlet이 응답할 뷰로 이동한다.


* annotation 공부해야함.
1) @Configuration : bean을 만드는 java class 파일. spring bean configuration file과 같은 일을 함.

2) @Bean : bean을 만든다.

3) @ImportResource("java/customer_context.xml") : java/customer_context.xml에 만들어져 있는 bean을 가져오세요.

4) @Controller : 서블릿으로 만들지 않고 클래스로 컨트롤러 역할을 수행한다.

5) @RequestMapping(value = "/", method = RequestMethod.GET)
   - URLMapping을 처리하는 애너테이션이다.
   - 메소드마다 하나씩 가져가야 한다.
   - 속성
	1) value : URLMapping 작성
	2) method : 요청 메소드 작성(GET, POST)

6) @Autowired
   - bean의 타입(class)이 일치하는 bean을 찾아서 주입하는 방식(주의. bean의 이름(id)를 찾는 방식이 아님)
   - 필드, 생성자, setter에서 사용하는데 상황에 따라 생략

* DI

  1. Dependency Injection
  2. 의존성 주입
  3. 스프링 컨테이너에 있는 bean을 스프링이 주입하는 방법
  4. 방법
     1) 필드에 직접 주입       -> 필드가 많은 경우 사용하지 않는 것이 좋다.
     2) 생성자를 이용해서 주입 -> @Autowired 안 적어도 된다.
     3) setter를 이용해서 주입

7) @Qualifier(value="board1")    // <qualifier value="board1"/> 이 bean을 주입해 주세요.
   - @Autowired는 class로 bean을 인식하기 때문에 
     id="board1"과 id="board2"를 다를 bean으로 인식하지 못한다. 이를 해결

8) @RequestParam(value="name", required=false, defaultValue="아무개")
   - value="파라미터"       : 전달되는 파라미터 이름이다.
   - required=false         : 꼭 필요한 파라미터가 아니다. (기본값은 required=true)
   - defaultValue="기본값"  : 파라미터가 없으면 사용할 값이다.
   - @RequestParam 애너테이션은 없어도 잘 동작한다.

9) @ModelAttribute(value="member") Member member
   - 파라미터 name과 age를 Member member에 저장하고,
   - Model에 member 속성(attribute)으로 저장한다.

10) @GetMapping // @PostMapping

11) @ResponseBody
    - 반환하는 건 JSP 이름이 아니라 어떤 값(텍스트, XML, JSON 등)
    - 있으면 Ajax(페이지 안바뀜), 없으면 MVC(페이지 바뀜)

12) @RestController
    - Ajax 처리를 위한 컨트롤러
    - 모든 메소드에 @ResponseBody 애너테이션을 자동으로 붙여준다.

13) @Repository   -- 있어도 되고 없어도 된다.
14) @Service      -- 있어도 되고 없어도 된다.

15) @Data(lombok) : Getter, Setter, ToString을 포함한 애너테이션.
                  : 생성자 두개는 선언 해줘야 한다.(@NoArgsConstructor, @AllArgsConstructor)

16) @Aspect : 공통 모듈(공통으로 해야 할 일)을 담당하고 있다.

17) @EnableAspectJAutoProxy : Aspect의 동작이 자동으로 진행된다.

18) @EnableTransactionManagement : Transaction 동작을 허용합니다.

19) @Component : bean으로 만들어 준다.
    - @Component     : 클래스를 bean으로 만들어 준다. 
    - @Configuration : 메소드를 bean으로 만들어 준다.

20) 실행 시점
    - @Before : 메소드 호출 전
    - @After  : 메소드 호출 후 (실행의 성공 여부 상관 없음)
    - @AfterReturning : 메소드 호출 후 (실행의 성공)
    - @AfterThrowing  : 메소드 호출 후 (예외 발생)
    - @Around : 메소드 호출 전후
	
21) @Around("execution(* com.goodee.ex08.controller.*Controller.*(..))")
    - 패키지 com.goodee.ex08.controller 아래에 있는 
    - Controller로 이름이 끝나는 클래스(*Controller)
    - 모든 메소드(*(..))에서 실행할 거에요.

22) @PropertySource(value={"classpath:mybatis/properties/db.properties"})
    - mybatis/properties/db.properties 파일의 내용을 참조하겠습니다.

23) @Value(value="${hikariConfig.driverClassName}") private String driverClassName;
    @Value(value="${hikariConfig.jdbcUrl}") private String jdbcUrl;
    @Value(value="${hikariConfig.username}") private String username;
    @Value(value="${hikariConfig.password}") private String password;
    - mybatis/properties/db.properties 파일에 등록된 프로퍼티 값을 변수에 저장합니다.
    - 프로퍼티들은 ${}로 처리합니다.

24) @Bean(destroyMethod="close") 
    - HikaryCP Bean으로 만들 때 사용











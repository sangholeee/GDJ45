/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-03 02:40:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class manage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write("	label {\r\n");
      out.write("	display: block;\r\n");
      out.write("	margin-bottom: 3px;\r\n");
      out.write("	}\r\n");
      out.write("	.btn {\r\n");
      out.write("	margin-top: 5px;\r\n");
      out.write("	}\r\n");
      out.write("	td {\r\n");
      out.write("	border-top: 1px solid gray;\r\n");
      out.write("	border-bottom: 1px solid gray;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	padding: 3px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("	// 페이지 로드 이벤트\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		fnList();\r\n");
      out.write("		fnDetail();\r\n");
      out.write("		fnAdd();\r\n");
      out.write("		fnModify();\r\n");
      out.write("		fnRemove();\r\n");
      out.write("		fnInit();\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	// 함수\r\n");
      out.write("	function fnList(){\r\n");
      out.write("		// 화면이 열리면 곧바로 실행\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: '/AJAX/list.do',\r\n");
      out.write("			dataType: 'json',\r\n");
      out.write("			success: function(responseText){     // responseText : {\"count\":7, \"members\":[]}\r\n");
      out.write("				$('#memberCount').text(responseText.count);\r\n");
      out.write("				var memberList = $('#memberList');\r\n");
      out.write("				memberList.empty();    // 회원 목록의 초기화\r\n");
      out.write("				$.each(responseText.members, function(i, member) {\r\n");
      out.write("					var tr = '<tr>';\r\n");
      out.write("					tr += '<td>' + member.id + '</td>';\r\n");
      out.write("					tr += '<td>' + member.name + '</td>';\r\n");
      out.write("					tr += '<td>' + member.gender + '</td>';\r\n");
      out.write("					tr += '<td>' + member.address + '</td>';\r\n");
      out.write("					tr += '<td><input type=\"hidden\" name=\"no\" value=\"' + member.no + '\"><input type=\"button\" value=\"조회\" class=\"btnDetail\" data-no=\"' + member.no + '\"></td>';\r\n");
      out.write("					tr += '</tr>';\r\n");
      out.write("					memberList.append(tr);\r\n");
      out.write("				})\r\n");
      out.write("			}\r\n");
      out.write("		})		\r\n");
      out.write("	}\r\n");
      out.write("	function fnDetail(){\r\n");
      out.write("		// 조회 버튼을 클릭하면 실행\r\n");
      out.write("		// 조회 버튼은 동적 요소(dynamic element)이므로,\r\n");
      out.write("		// 직접 이벤트 대상으로 사용하지 않고, 부모(정적 요소)를 기반으로 이벤트를 등록시킨다.\r\n");
      out.write("		$('body').on('click', '.btnDetail', function() {\r\n");
      out.write("			var no = $(this).prev().val()     // var no = $(this).data('no');\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: '/AJAX/detail.do',\r\n");
      out.write("				data: 'no=' + no,\r\n");
      out.write("				type: 'get',     // 지정된 리소스로부터 데이터를 요청한다, 보통 서버로부터 데이터를 가져온다.\r\n");
      out.write("				dataType: 'json',\r\n");
      out.write("				success: function(responseText) {   // responseText : {\"result\": true, \"member\": {}, {\"result\": false}}\r\n");
      out.write("					if(responseText.result == true) {\r\n");
      out.write("						$('#id').val(responseText.member.id).prop('readonly', true);\r\n");
      out.write("						$('#name').val(responseText.member.name);\r\n");
      out.write("						$(':radio[name=\"gender\"][value=\"' + responseText.member.gender + '\"]').prop('checked', true);\r\n");
      out.write("						$('#address').val(responseText.member.address);\r\n");
      out.write("					} else {\r\n");
      out.write("						alert('조회된 회원 정보가 없습니다.')\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	function fnAdd(){\r\n");
      out.write("		// 등록 버튼을 클릭하면 실행\r\n");
      out.write("		$('#btnAdd').on('click', function() {\r\n");
      out.write("			\r\n");
      out.write("			// 요청 URL\r\n");
      out.write("			// http://localhost:9090/AJAX/add.do\r\n");
      out.write("			\r\n");
      out.write("			// 요청 Method\r\n");
      out.write("			// POST\r\n");
      out.write("				\r\n");
      out.write("			// 요청 Parameter\r\n");
      out.write("			// id=아이디&name=이름&gender=성별&adress=주소\r\n");
      out.write("			\r\n");
      out.write("			// 요청 Parameter 상세\r\n");
      out.write("			// id      : 신규 회원의 아이디 (필수, 중복 불가)\r\n");
      out.write("			// name    : 신규 회원의 이름\r\n");
      out.write("			// gender  : 신규 회원의 성별\r\n");
      out.write("			// address : 신규 회원의 주소\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: '/AJAX/add.do',\r\n");
      out.write("				type: 'POST',     // 처리할 데이터를 지정된 리소스에게 제출한다, \r\n");
      out.write("				                  // 서버로부터 데이터를 가져오지만, 보통 요청으로부터 데이터를 보내는데 사용한다.\r\n");
      out.write("				// data: 'id=' + $('#id').val() + '&name=' + $('#name').val() + '&gender=' + $(':radio[name=\"gender\"]:checked').val() + '&address=' + $('#address').val(),\r\n");
      out.write("				data: $('#formMember').serialize(),\r\n");
      out.write("				// 여기까지 요청\r\n");
      out.write("				dataType: 'json',  // 여기부터 응답\r\n");
      out.write("				success: function(responseText){\r\n");
      out.write("					if(responseText.res == 1) {\r\n");
      out.write("						alert('신규 회원이 등록되었습니다.');\r\n");
      out.write("						fnList();\r\n");
      out.write("						$('#id').val('');\r\n");
      out.write("						$('#name').val('');\r\n");
      out.write("						$(':radio[name=\"gender\"]').prop('checked', false);\r\n");
      out.write("						$('#address').val('');\r\n");
      out.write("					}\r\n");
      out.write("				}, \r\n");
      out.write("				error: function(jqXHR) {\r\n");
      out.write("					alert(jqXHR.status)\r\n");
      out.write("					alert(jqXHR.responseText)\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("	}\r\n");
      out.write("	function fnModify(){\r\n");
      out.write("		// 수정 버튼을 클릭하면 실행\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	function fnRemove(){\r\n");
      out.write("		// 삭제 버튼을 클릭하면 실행\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	function fnInit(){\r\n");
      out.write("		// 초기화 버튼을 클릭하면 실행\r\n");
      out.write("		$('#btnInit').on('click', function(){\r\n");
      out.write("			$('#id').val('').prop('readonly', false);\r\n");
      out.write("			$('#name').val('');\r\n");
      out.write("			$(':radio[name=\"gender\"]').prop('checked', false);\r\n");
      out.write("			$('#address').val('');\r\n");
      out.write("		})\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h1>회원관리</h1>\r\n");
      out.write("	<div>\r\n");
      out.write("		<form id=\"formMember\">\r\n");
      out.write("			<label for=\"id\">\r\n");
      out.write("				아이디\r\n");
      out.write("				<input type=\"text\" name=\"id\" id=\"id\">\r\n");
      out.write("			</label>\r\n");
      out.write("			<label for=\"name\">\r\n");
      out.write("				이름\r\n");
      out.write("				<input type=\"text\" name=\"name\" id=\"name\">\r\n");
      out.write("			</label>\r\n");
      out.write("			<label for=\"male\">\r\n");
      out.write("				남자\r\n");
      out.write("				<input type=\"radio\" name=\"gender\" id=\"male\" value=\"male\">\r\n");
      out.write("			</label>\r\n");
      out.write("			<label for=\"female\">\r\n");
      out.write("				여자\r\n");
      out.write("				<input type=\"radio\" name=\"gender\" id=\"female\" value=\"female\">\r\n");
      out.write("			</label>\r\n");
      out.write("			<label for=\"address\">\r\n");
      out.write("				주소\r\n");
      out.write("				<input type=\"text\" name=\"address\" id=\"address\">\r\n");
      out.write("			</label>\r\n");
      out.write("			<div class=\"btn\">\r\n");
      out.write("				<input type=\"button\" value=\"초기화\" id=\"btnInit\">\r\n");
      out.write("				<input type=\"button\" value=\"등록\" id=\"btnAdd\">\r\n");
      out.write("				<input type=\"button\" value=\"수정\" id=\"btnModify\">\r\n");
      out.write("				<input type=\"button\" value=\"삭제\" id=\"btnRemove\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div>\r\n");
      out.write("		<table border=\"1\">\r\n");
      out.write("		<caption>회원수 <span id=\"memberCount\"></span>명</caption>\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>아이디</td>\r\n");
      out.write("					<td>이름</td>\r\n");
      out.write("					<td>성별</td>\r\n");
      out.write("					<td>주소</td>\r\n");
      out.write("					<td>버튼</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tbody id=\"memberList\">\r\n");
      out.write("			</tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
